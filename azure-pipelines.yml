# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger: none
pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  Listjj_IMAGE_NAME: 'jarekj9/listjj_blazor_api'
  MARIADB_IMAGE_NAME: 'mariadb:latest'
  ZAP_IMAGE_NAME: 'zaproxy/zap-stable'
  LISTJJ_CONTAINER_NAME: 'listjj_blazor_api'
  MARIADB_CONTAINER_NAME: 'mariadb'
  ZAP_CONTAINER_NAME: 'owasp-zap'
  TEST_URL: 'http://listjj_blazor_api' 

stages:

- stage: TestSecurity
  jobs:
  - job: SecurityScan
    steps:
    - script: |
        docker network create common-net

        docker run -d --rm --name $(MARIADB_CONTAINER_NAME) --network common-net \
          -e MYSQL_ROOT_PASSWORD=Root1234* \
          -e MYSQL_DATABASE=listjj_db \
          $(MARIADB_IMAGE_NAME)

        docker run -d --rm --name $(LISTJJ_CONTAINER_NAME) --network common-net \
          -e ConnectionStrings__MySqlDbContext="server=$(MARIADB_CONTAINER_NAME);database=listjj_db;user=root;password=Root1234*" \
          -e Authentication__Google__ClientId="anything" \
          -e Authentication__Google__ClientSecret="anything" \
          -e ASPNETCORE_ENVIRONMENT="Development" \
          $(Listjj_IMAGE_NAME)

        docker run -d --rm --user root --name $(ZAP_CONTAINER_NAME) -v /tmp/wrk:/zap/wrk:rw  --network common-net $(ZAP_IMAGE_NAME) tail -f /dev/null
        sleep 60  # Give time for services to start
        docker ps -a
        docker logs $(LISTJJ_CONTAINER_NAME)
      displayName: 'Start .NET App and OWASP ZAP'

    - script: |
        docker exec $(ZAP_CONTAINER_NAME) zap-baseline.py -t $(TEST_URL) -J zap_report.json -r zap_report.html || true
      displayName: 'Run OWASP ZAP Scan'

    - script: |
        docker cp $(ZAP_CONTAINER_NAME):/zap/wrk $(Build.ArtifactStagingDirectory)/zap_outputs
      displayName: 'Copy ZAP Report'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/zap_outputs'
        artifactName: 'ZAPReport'
      displayName: 'Publish ZAP Report'

    - script: |
        cp $(Build.ArtifactStagingDirectory)/zap_outputs/zap_report.json zap_report.json
        HIGH_COUNT=$(jq '[.site[].alerts[] | select(.risk == "High")] | length' zap_report.json)
        MEDIUM_COUNT=$(jq '[.site[].alerts[] | select(.risk == "Medium")] | length' zap_report.json)
        if [ "$HIGH_COUNT" -gt 0 ]; then
          echo "High severity vulnerabilities found: $HIGH_COUNT"
          exit 1
        else
          echo "No high severity vulnerabilities found."
          echo "MEDIUM: $MEDIUM_COUNT"
        fi
      displayName: 'Check for High Severity Vulnerabilities'

    - script: |
        docker stop $(LISTJJ_CONTAINER_NAME)
        docker stop $(MARIADB_CONTAINER_NAME)
        docker stop $(ZAP_CONTAINER_NAME)
        docker network rm common-net
      displayName: 'Clean Up'