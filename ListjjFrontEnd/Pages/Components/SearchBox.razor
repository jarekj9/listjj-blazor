@using Listjj.Infrastructure.ViewModels
@using ListjjFrontEnd.Extensions
@using System.Linq
@using System.Linq.Expressions 
@using MudBlazor
@using MudBlazor.Components
@inherits PageBase

<div class="row">
    <div class="col-lg-12 col-xl-9 mt-auto">
        <a data-toggle="collapse" href="#filterDropdown">
            <span class="text-primary font-weight-bold">Filter</span>
            <i class="fas fa-caret-down text-primary"></i>
        </a>
        <div class="collapse" id="filterDropdown">
            <div class="form-group addFormBackground divRounded">
                <div class="row">
                    <div class="col-md-12 col-lg-6 input-group mb-3 mt-5 ">
                        <input type="text" class="form-control ml-2" style="height:30px;" placeholder="Search" @bind-value="SearchText" @bind-value:event="oninput" @onkeydown="OnSearchKeyDown">
                        <div class="input-group-append">
                            <button class="btn btn-sm btn-outline-primary mr-2" style="height:30px;" @onclick="() => UpdateList.Invoke()"><i class="fa fa-search" aria-hidden="true"></i></button>
                        </div>
                    </div>
                    <div class="col-12 col-lg-6">
                        <div class="row divRounded">
                            <div class="col-6">
                                <MudDatePicker Color="Color.Dark" Class="mb-2 ml-2 mr-2" Label="From:" @bind-Date="fromDate" />
                            </div>
                            <div class="col-6">
                                <MudDatePicker Color="Color.Dark" Class="mb-2 ml-2 mr-2" Label="To:" @bind-Date="toDate" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid CategoryFilterCategoryId { get; set; }
    [Parameter] public Func<Task> UpdateList { get; set; }
    public DateTime? fromDate { get; set; } = DateTime.Today.AddYears(-10);
    public DateTime? toDate { get; set; } = DateTime.Today.AddDays(1);
    public string SearchText { get; set; }


    private Task OnSearchKeyDown(KeyboardEventArgs e) => e.Code is "Enter" or "NumpadEnter" ? UpdateList.Invoke() : Task.CompletedTask;


    public async Task<Expression<Func<ListItemViewModel, bool>>> MakeSearchFilter()
    {
        Expression<Func<ListItemViewModel, bool>> filter = x => x.UserId == appState.UserId && x.Modified >= fromDate && x.Modified <= toDate;

        if (CategoryFilterCategoryId != Guid.Parse("00000000-0000-0000-0000-000000000000"))
        {
            filter = ExpressionExtensions<ListItemViewModel>.AndAlso(filter, x => x.CategoryId == CategoryFilterCategoryId);
        }

        if (string.IsNullOrEmpty(SearchText))
        {
            return filter;
        }
        var searchWords = SearchText.Trim().Split(' ').ToList();
        var negatedSearchWords = searchWords.Where(x => x[0] == '!').Select(x => x.Remove(0, 1)).ToList();
        searchWords = searchWords.Where(x => x[0] != '!').ToList();
        filter = searchWords.Aggregate(
            filter,
            (currentExpr, nextWord) => ExpressionExtensions<ListItemViewModel>.AndAlso(
                currentExpr,
                x => x.Name.Contains(nextWord) || x.Tags.Contains(nextWord)
            )
        );
        filter = negatedSearchWords.Aggregate(
            filter,
            (currentExpr, nextWord) => ExpressionExtensions<ListItemViewModel>.AndAlso(
                currentExpr,
                x => !x.Name.Contains(nextWord) && !x.Tags.Contains(nextWord)
            )
        );
        return filter;
    }
}
