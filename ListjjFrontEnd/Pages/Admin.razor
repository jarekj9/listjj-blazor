@using Listjj.Infrastructure.ViewModels;
@using ListjjFrontEnd.Services.Abstract
@using ListjjFrontEnd.Services
@using Microsoft.AspNetCore.Components.Authorization
@using ListjjFrontEnd.Pages.Components
@inherits PageBase

@layout ListjjLayout
@page "/admin"


<AuthorizeView Roles="Admin">

    <MudLayout>
        <MudAppBar Elevation="1" Dense="true">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(() => isDrawerOpen = !isDrawerOpen)" />
            <TopBar />
        </MudAppBar>
        <MudDrawer Width="300px" @bind-Open="@isDrawerOpen" ClipMode="DrawerClipMode.Never" Elevation="1" Variant="@DrawerVariant.Responsive">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">Add User</MudText>
            </MudDrawerHeader>
            <AddUser UpdateList="UpdateList" AllRoles="allRoles"></AddUser>
        </MudDrawer>
        <MudMainContent Class="pt-2 pl-2">

            <table class="table table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Name</th>
                        <th>Password</th>
                        <th>Role</th>
                        <th>Action</th>
                    </tr>
                </thead>
                @foreach (var user in UsersVm)
                {
                    <tr hidden="@user.IsEditing" @ondblclick="() => user.IsEditing = !user.IsEditing">
                        <td>@user.Email</td>
                        <td></td>
                        <td>@user.Role</td>
                        <td>
                            <button class="btn btn-outline-danger icon-button p-1 m-1" @onclick="() => DeleteUser(user)" title="Delete"><i class="far fa-trash-alt"></i></button>
                            <button class="btn btn-outline-primary icon-button p-1 m-1 hide-on-mobile" @onclick="() => ShowEdit(user)" title="Edit"><i class="far fa-edit"></i></button>
                        </td>
                    </tr>
                    @if (user.IsEditing)
                    {
                        <tr class="table-secondary" @ondblclick="() => user.IsEditing = !user.IsEditing">
                            <td><input for="Name" class="form-controll" @bind="@user.Email" style="width: 100%; max-width: 100%;"/></td>
                            <td><input for="Password" type="password" class="form-controll" @bind="@user.Password" style="width: 100%; max-width: 100%;" title="Leave blank if not changing"/></td>
                            <td>
                                <select id="roleselect" @bind="@user.Role">
                                    <option value="">None</option>
                                    @foreach (var role in allRoles)
                                    {
                                        <option value="@role.Name">@role.Name</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <button class="btn btn-outline-primary icon-button p-1 m-1" @onclick="() => EditUser(user)" title="Save"><i class="far fa-save"></i></button>
                                <button class="btn btn-outline-secondary icon-button p-1 m-1" @onclick="() => ShowEdit(user)" title="Cancel"><i class="far fa-window-close"></i></button>
                            </td>
                        </tr>
                    }

                }
            </table>


        </MudMainContent>
    </MudLayout>
</AuthorizeView>

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private IUserService UserService { get; set; }
    [Inject] private IRolesService RolesService { get; set; }
    private List<RoleViewModel> allRoles = new List<RoleViewModel>();
    private List<UserViewModel> UsersVm = new List<UserViewModel>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private new async Task LoadData()
    {
        allRoles = await RolesService.GetAllRoles();
        UsersVm = await UserService.GetAllUsers();
    }

    public async Task UpdateList()
    {
        await LoadData();
        StateHasChanged();
    }

    private async Task DeleteUser(UserViewModel userVm)
    {
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("swalConfirm", $"Are you sure, that you want to delete user {userVm.Email} ?");
        if (!isConfirmed)
        {
            return;
        }
        if(await UserService.Delete(userVm))
        {
            await JSRuntime.InvokeAsync<bool>("notify", $"Deleted {userVm.Email}");
            await UpdateList();
        }
        else
        {
            await JSRuntime.InvokeAsync<bool>("notifyError", $"Can't delete {userVm.Email}");
        }
    }

    private void ShowEdit(UserViewModel userVm)
    {
        userVm.IsEditing = !userVm.IsEditing;
    }

    protected async Task EditUser(UserViewModel userVm)
    {
        var result = await UserService.AddorUpdate(userVm);
        if (result)
        {
            userVm.IsEditing = false;
            await JSRuntime.InvokeAsync<bool>("notify", $"Updated {userVm.Email}");
            await UpdateList();
        }
        else
        {
            await JSRuntime.InvokeAsync<bool>("notifyError", $"Can't update {userVm.Email}");
        }
    }

}
