trigger:
- none
pr:
- none

pool:
  vmImage: ubuntu-latest

variables:
  SONARQUBE_IMAGE: 'sonarqube:lts-community'
  SONARQUBE_CONTAINERNAME: 'sonarqube'
  POSTGRES_IMAGE: 'postgres:13'
  POSTGRES_CONTAINERNAME: 'sonar_db'

steps:
- script: |
    docker network create common-net
    docker run --rm -d --name $(POSTGRES_CONTAINERNAME) --network common-net \
     -e POSTGRES_USER=sonar \
     -e POSTGRES_PASSWORD=sonar \
     -e POSTGRES_DB=sonar \
     $(POSTGRES_IMAGE)
  displayName: 'Run PostgreSQL DB container'

- script: |
    docker run -d --name $(SONARQUBE_CONTAINERNAME) --network common-net \
     -e SONAR_JDBC_URL=jdbc:postgresql://$(POSTGRES_CONTAINERNAME):5432/sonar \
     -e SONAR_JDBC_USERNAME=sonar \
     -e SONAR_JDBC_PASSWORD=sonar \
     -p 9009:9000 \
     $(SONARQUBE_IMAGE)
  displayName: 'Run SonarQube container'

- script: sleep 60

- script: |
    TOKEN=$(curl -u admin:admin -X POST "http://localhost:9009/api/user_tokens/generate" -d "name=myToken1" | grep -o '"token":"[^"]*' | sed 's/"token":"//')
    ls $(Build.SourcesDirectory)
    docker run \
      -v $(Build.SourcesDirectory)/Listjj:/usr/src \
      --network common-net \
      -e SONAR_HOST_URL="http://sonarqube:9000" \
      -e SONAR_TOKEN=$TOKEN \
      sonarsource/sonar-scanner-cli:latest \
      sonar-scanner \
        -Dsonar.projectKey=my_project \
        -Dsonar.language=cs \
        -Dsonar.exclusions=**/*.min.js,**/*.min.css \
        -Dsonar.inclusions=**/*.cs,**/*.cshtml,**/*.razor.cs
  displayName: 'Run SonarQube scan'

#- script: sleep 120
- script: |
    echo "Waiting for SonarQube analysis to complete..."
    TOKEN=$(curl -u admin:admin -X POST "http://localhost:9009/api/user_tokens/generate" -d "name=myToken3" | grep -o '"token":"[^"]*' | sed 's/"token":"//')
    
    while true; do
      STATUS=$(curl -s -u "$TOKEN:" "http://localhost:9009/api/ce/component?component=my_project" | grep -o '"status":"[^"]*' | sed 's/"status":"//')
      
      if [ "$STATUS" = "SUCCESS" ]; then
        echo "Analysis completed successfully"
        break
      elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "CANCELED" ]; then
        echo "Analysis failed or was canceled"
        exit 1
      fi
      
      echo "Analysis still in progress... waiting 10 seconds"
      sleep 10
    done
  displayName: 'Wait for analysis completion'

- script: |
    TOKEN=$(curl -u admin:admin -X POST "http://localhost:9009/api/user_tokens/generate" -d "name=myToken2" | grep -o '"token":"[^"]*' | sed 's/"token":"//')
    curl -u "$TOKEN:" \
     -o report.json \
     "http://localhost:9009/api/issues/search?componentKeys=my_project"
    cp report.json $(Build.ArtifactStagingDirectory)/report.json
  displayName: 'Get scan report'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)/report.json
    artifactName: SonarQubeReport
  displayName: "Publish SonarQube Report"

- script: |
    docker stop $(SONARQUBE_CONTAINERNAME)
    docker stop $(POSTGRES_CONTAINERNAME)
    docker network rm common-net
  displayName: 'Clean Up'