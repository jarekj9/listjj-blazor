@using Listjj.Models
@using Listjj.Abstract
@using Listjj.Pages.Components
@using Listjj.Repository
@inherits PageBase

@layout ListjjLayout
@page "/categories"


<AuthorizeView Roles="User, Admin">

    <MudLayout>
        <MudAppBar Elevation="1" Dense="true">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(() => isDrawerOpen = !isDrawerOpen)" />
            <TopBar />
        </MudAppBar>
        <MudDrawer Width="300px" @bind-Open="@isDrawerOpen" ClipMode="DrawerClipMode.Never" Elevation="1" Variant="@DrawerVariant.Responsive">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">Add Category</MudText>
            </MudDrawerHeader>
            <AddCategory UpdateList="UpdateList"></AddCategory>
        </MudDrawer>
        <MudMainContent Class="pt-2 pl-2">


            @if (CategoriesVm is null)
            {
                <p><em>Loading... !</em></p>
            }
            else
            {
                <table class="table table-striped">
                    <thead class="thead-dark">
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    @foreach (var category in CategoriesVm)
                    {
                        <tr hidden="@category.IsEditing" @ondblclick="() => category.IsEditing = !category.IsEditing">
                            <td>
                                @category.Name
                            </td>
                            <td>
                                @category.Description
                            </td>
                            <td>
                                <button class="btn btn-outline-danger icon-button mb-1" @onclick="() => DeleteCategory(category)" title="Delete"><i class="far fa-trash-alt"></i></button>
                                <button class="btn btn-outline-primary icon-button mb-1 hide-on-mobile" @onclick="() => ShowEdit(category)" title="Edit"><i class="far fa-edit"></i></button>
                            </td>
                        </tr>
                        @if (category.IsEditing)
                        {
                            <tr class="table-secondary" @ondblclick="() => category.IsEditing = !category.IsEditing">
                                <td><input for="Name" class="form-controll" @bind="@category.Name" style="width: 100%; max-width: 100%;"/></td>
                                <td><textarea for="Description" class="form-controll" @bind="@category.Description" style="width: 100%; max-width: 100%;"/></td>
                                <td>
                                    <button class="btn btn-outline-primary icon-button mb-1" @onclick="() => EditCategory(category)" title="Save"><i class="far fa-save"></i></button>
                                    <button class="btn btn-outline-secondary icon-button mb-1" @onclick="() => ShowEdit(category)" title="Cancel"><i class="far fa-window-close"></i></button>
                                </td>
                            </tr>
                        }

                    }
                </table>
            }


        </MudMainContent>
    </MudLayout>
</AuthorizeView>

<NotAuthorized>
    No access.
</NotAuthorized>

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    public async Task UpdateList()
    {
        await LoadData();
        StateHasChanged();
    }

    private async Task DeleteCategory(CategoryViewModel categoryVm)
    {
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("swalConfirm", $"Are you sure, that you want to delete category {categoryVm.Name} ?");
        if (!isConfirmed)
        {
            return;
        }
        var category = await UnitOfWork.Categories.GetById(categoryVm.Id);
        Mapper.Map<CategoryViewModel, Category>(categoryVm, category);
        UnitOfWork.Categories.Delete(category.Id);
        await UnitOfWork.Save();
        await JSRuntime.InvokeAsync<bool>("notify", $"Deleted {category.Name}");
        await UpdateList();
    }

    private void ShowEdit(CategoryViewModel categoryVm)
    {
        categoryVm.IsEditing = !categoryVm.IsEditing;
    }

    protected async Task EditCategory(CategoryViewModel categoryVm)
    {
        var category = await UnitOfWork.Categories.GetById(categoryVm.Id);
        Mapper.Map<CategoryViewModel, Category>(categoryVm, category);
        category.IsEditing = false;
        UnitOfWork.Categories.Update(category);
        await UnitOfWork.Save();
        await JSRuntime.InvokeAsync<bool>("notify", $"Updated {category.Name}");
        await UpdateList();
    }

}
