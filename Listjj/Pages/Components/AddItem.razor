@using Listjj.Repository
@inherits PageBase

<EditForm Model="@ItemVm" OnValidSubmit="HandleValidSubmit">
    <!-- The button disables implicit form submissoon -->
    <button disabled style="display: none;"></button>

    <div class="form-group addFormBackground">
        <div class="container-fluid pt-1">
            <div class="row">
                <div class="form-group col-12 text-nowrap addDiv">
                    <label class="control-label addLabel" for="new-value">Value: </label>
                    <input id="new-value" @bind="@ItemVm.Value" type="number" class="form-controll" style="width: 50px;">
                </div>
                <div class="form-group col-12 text-nowrap addDiv">
                    <label class="control-label addLabel" for="new-name">Name: </label>
                    <input id="new-name" @bind="@ItemVm.Name" type="text" class="form-controll" style="width: 70%; height: 100%;">
                </div>
                <div class="form-group col-12 text-nowrap addDiv">
                    <label class="control-label addLabel align-top" for="new-dsc">Description: </label>
                    <textarea id="new-dsc" class="form-controll" @bind="@ItemVm.Description" style="width: 70%; height: 100%;"/>
                </div>
                <div class="form-group col-12 text-nowrap addDiv">
                    <label class="control-label addLabel" for="new-category">Category:</label>
                    <select class="addBox" id="new-category" @bind="@RecentCategoryId">
                        <option value="00000000-0000-0000-0000-000000000000">---select---</option>
                        @if (CategoriesVm is null)
                        {
                            <option>
                                <div class="spinner-border" role="status">
                                    <span class="sr-only">Loading...</span>
                                </div>
                            </option>
                        }
                        else
                        {
                            @foreach (var category in CategoriesVm)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        }
                    </select>
                </div>
                <div class="form-group col-12 text-nowrap addDiv">
                    <label class="control-label addLabel" for="new-active">Active: </label>
                    <input id="new-active" type="checkbox" @bind="@ItemVm.Active" class="form-controll">
                </div>
                <div class="form-group col-12 addDiv">
                    <TagsInput Tags="ItemVm.Tags" />
                </div>
            </div>
        </div>
        <button type="submit" class="btn btn-outline-primary m-3" value="Save">Save</button>
    </div>
</EditForm>

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Parameter] public EventCallback UpdateList { get; set; }
    [Parameter] public ListItemViewModel ItemVm { get; set; } = new ListItemViewModel();
    private Guid recentCategoryId;
    [Parameter] public Guid RecentCategoryId
    {
        get => recentCategoryId;
        set
        {
            if (recentCategoryId == value) return;
            recentCategoryId = value;
            ItemVm.CategoryId = value;
            RecentCategoryIdChanged.InvokeAsync(value);
        }

    }
    [Parameter] public EventCallback<Guid> RecentCategoryIdChanged { get; set; }

    protected async Task HandleValidSubmit()
    {
        if (!appState.IsLoggedIn)
        {
            await JSRuntime.InvokeAsync<object>("alert", "Please login first.");
            return;
        }
        var category = await UnitOfWork.Categories.GetById(ItemVm.CategoryId);
        if(category is null) {  // no category selected
            if (CategoriesVm.Any() is not false) {
                ItemVm.CategoryId = CategoriesVm[0].Id;
            }
            else {
                Category defaultCat = new Category();
                defaultCat.Name = "default";
                defaultCat.UserId = appState.UserId;
                UnitOfWork.Categories.Add(defaultCat);
                await UnitOfWork.Save();
                category = await UnitOfWork.Categories.GetById(defaultCat.Id);
                ItemVm.CategoryId = category.Id;
            }
        }
        ItemVm.UserId = appState.UserId;
        var item = new ListItem();
        Mapper.Map<ListItemViewModel, ListItem>(ItemVm, item);
        item.Created = item.Modified = DateTime.Now;
        Items = await UnitOfWork.ListItems.GetAllByUserId(appState.UserId);
        item.SequenceNumber = Items?.Max(i => i?.SequenceNumber ?? 0) + 1 ?? 0;
        UnitOfWork.ListItems.Add(item);
        await UnitOfWork.Save();
        await JSRuntime.InvokeAsync<bool>("notify", $"Added {ItemVm.Name}");
        await UpdateList.InvokeAsync();
        ItemVm = new ListItemViewModel();
        ItemVm.CategoryId = RecentCategoryId;
    }

}