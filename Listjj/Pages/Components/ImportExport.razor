@using Listjj.Models
@using Listjj.Abstract
@using System.IO
@using System.Text
@using Listjj.Repository
@inject IFileService FileService
@inherits PageBase

<div>
    <span class="input-zone p-3 m-2" style="float: left;" @onclick="DownloadFile">
        Export
    </span>
    <span class="input-zone p-3 m-2" style="float: left;">
        <InputFile OnChange="@Upload"/>
        Drop file to import notes
    </span>
</div>


@code {
    [Inject] private IJSRuntime JSRuntime { get; set; }

    private async void DownloadFile() 
    {
        var items = await UnitOfWork.ListItems.GetAllByUserId(appState.UserId);
        var categories = UnitOfWork.Categories.GetAll();
        var text = "Value;Name;Description;Category;Active;Tags;\n";
        foreach(var item in items) {
            text += ($"{item.Value};{item.Name};{item.Description};{item.Category.Name};{item.Active};{item.Tags}\n");
        }
        var bytes = System.Text.Encoding.UTF8.GetBytes(text);
        await FileService.SaveAs(JSRuntime, "export.csv", bytes);
    }

    private async Task Upload(InputFileChangeEventArgs e)
    {
        Console.WriteLine("Uploading...");
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);

        ms.Position = 0;
        using (var reader = new StreamReader(ms, Encoding.UTF8))
        {
            string line;
            string[] words;
            line = reader.ReadLine();  // skip heading
            while ((line = reader.ReadLine()) != null)
            {
                ListItem item = new ListItem();
                Category category = new Category();
                words = line.Split(";");
                item.Value = Double.Parse(words[0]);
                item.Name = words[1];
                item.Description = words[2];
                item.Created = DateTime.Now;
                item.Modified = DateTime.Now;

                var categories = await UnitOfWork.Categories.GetAllByUserId(appState.UserId);
                categories = categories.Where(x => x.Name == words[3]).ToList();
                if(categories.Any()) {
                    category = categories[0];
                }
                else {
                    category.Name = words[3];
                    category.UserId = appState.UserId;
                    UnitOfWork.Categories.Add(category);
                    await UnitOfWork.Save();
                }
                item.CategoryId = category.Id;
                item.Active = Boolean.Parse(words[4]);
                item.Tags = words[5];
                item.UserId = appState.UserId;

                UnitOfWork.ListItems.Add(item);
                await UnitOfWork.Save();
            }
        }
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }
}
