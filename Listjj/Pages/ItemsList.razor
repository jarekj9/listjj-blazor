@using List.Extensions
@using System
@usingÂ System.Linq.Expressions
@using Listjj.Pages.Components
@using Microsoft.Extensions.Hosting
@using Listjj.Repository
@inject IRefreshService RefreshService
@inject IFileService FileService
@inherits PageBase
@layout ListjjLayout
@page "/list"

<AuthorizeView Roles="User">

    <MudLayout>
        <MudAppBar Elevation="1" Dense="true">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(() => isDrawerOpen = !isDrawerOpen)" />
            <TopBar />
        </MudAppBar>
        <MudDrawer Width="300px" @bind-Open="@isDrawerOpen" ClipMode="DrawerClipMode.Never" Elevation="1" Variant="@DrawerVariant.Responsive">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">Add Item</MudText>
            </MudDrawerHeader>
            <CascadingValue Value="@TagsSelection">
                <AddItem UpdateList="UpdateList" CategoriesVm="CategoriesVm" />
            </CascadingValue>
        </MudDrawer>
        <MudMainContent Class="pt-1 pl-2">


          <SearchBox @ref="searchBox" FilterItemsCategoryId="FilterItemsCategoryId" UpdateList="UpdateList"/>
            @if (ItemsVm is null)
            {
                <MudProgressCircular Color="Color.Dark" Style="height:70px;width:70px;" Indeterminate="true" />
            }
            else
            {
                <table class="table table-striped main-table">
                    <thead class="thead-dark">
                        <tr>
                            <th>Value</th>
                            <th>Name</th>
                            @*<th>Description</th>*@
                            <th>
                                <span style="display: inline-block">Category:&nbsp</span>
                                <span style="display: inline-block"><FilterItems @ref="filterItems" Categories="Categories" UpdateList="UpdateList" /></span>
                            </th>
                            <th>Active</th>
                            <th>Action</th>
                        </tr>
                    </thead>

                    @foreach (var item in ItemsVm)
                    {
                        <tr class="@(item.IsEditing ? "table-secondary" : "")" hidden="@item.IsEditing" @ondblclick="() => item.IsEditing = !item.IsEditing">
                            <td>
                                @item.Value
                            </td>
                            <td title="Created: @item.Created, Changed: @item.Modified">
                                @item.Name<br />
                                @item.Description
                                <TagsInput Tags="item.Tags" ReadOnly="true"/>
                                @if (item.Files.Count > 0)
                                {
                                    <div class="mt-3">
                                        <span class="font-weight-bold">Files:</span>
                                        <ul class="ml-3" style="overflow: visible;width:140%;">
                                            @foreach (var file in item.Files)
                                            {
                                                <li>
                                                    <a class="link-primary" @onclick="() => GetFile(file)">@file.Name</a> @(file.Size/1000) KB
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                }
                            </td>
                            @*<td>
                                    @item.Description
                                </td>*@
                            <td>
                                @item.Category.Name
                            </td>
                            <td>
                                <input type="checkbox" checked="@item.Active" @onchange="() => ClickActive(item)">
                            </td>
                            <td>
                                <button class="btn btn-outline-danger icon-button mb-1" @onclick="() => DeleteItem(item)" title="Delete"><i class="far fa-trash-alt"></i></button>
                                <button class="btn btn-outline-primary icon-button mb-1" @onclick="() => ShowEdit(item)" title="Edit"><i class="far fa-edit"></i></button>
                            </td>
                        </tr>

                        @if (item.IsEditing)
                        {
                            <tr class="table-secondary" @ondblclick="() => item.IsEditing = !item.IsEditing">
                                <td>
                                    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
                                        <input for="Value" class="form-controll" size="4" @bind="@item.Value" />
                                    </Animate>
                                </td>
                                <td>
                                    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
                                        <input size="18" for="Name" class="form-controll mb-1" @bind="@item.Name" /><br />
                                        <textarea rows="3" cols="20" for="Description" class="form-controll" @bind="@item.Description" />
                                        <CascadingValue Value="@TagsSelection">
                                            <TagsInput Tags="item.Tags" />
                                        </CascadingValue>
                                        <div class="mt-2">
                                            <FileUpload ItemVm="item">
                                                <FilesRows>
                                                    @if (item.Files.Count > 0)
                                                    {
                                                        <div class="mt-3">
                                                            <ul class="ml-3" style="overflow: visible;width:200%;">
                                                                @foreach (var file in item.Files)
                                                                {
                                                                    <li>
                                                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteFile(file, item)" title="Delete">
                                                                            <i class="far fa-trash-alt"></i>
                                                                        </button>
                                                                        <a class="link-primary" @onclick="() => GetFile(file)">@file.Name</a> @(file.Size/1000) KB
                                                                    </li>
                                                                }
                                                            </ul>
                                                        </div>
                                                    }
                                                </FilesRows>
                                            </FileUpload>
                                        </div>
                                    </Animate>
                                </td>
                                @*<td>
                                        <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
                                            <input for="Description" class="form-controll" @bind="@item.Description" />
                                        </Animate>
                                    </td>*@
                                <td>
                                    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
                                        <select @bind="@item.CategoryId">
                                            <option>---select---</option>
                                            @if (CategoriesVm is null)
                                            {
                                                <option>Loading...</option>
                                            }
                                            else
                                            {
                                                @foreach (var category in CategoriesVm)
                                                {
                                                    <option value="@category.Id">@category.Name</option>
                                                }
                                            }
                                        </select>
                                    </Animate>
                                </td>
                                <td>
                                    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
                                        <input type="checkbox" for="active" class="form-controll" @bind="@item.Active" />
                                    </Animate>
                                </td>
                                <td>
                                    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
                                        <button class="btn btn-outline-primary icon-button mb-1" @onclick="() => EditItem(item)" title="Save"><i class="far fa-save"></i></button>
                                        <button class="btn btn-outline-secondary icon-button mb-1" @onclick="() => ShowEdit(item)" title="Cancel"><i class="far fa-window-close"></i></button>
                                    </Animate>
                                </td>
                                <td>
                                </td>
                            </tr>
                        }
                    }
                </table>
                <a data-toggle="collapse" href="#advancedDropdown">
                    <span class="text-primary font-weight-bold text-small">Advanced</span>
                    <i class="fas fa-caret-down text-primary"></i>
                </a>
                <div class="collapse" id="advancedDropdown">
                    <ImportExport></ImportExport>
                    <ApiKey />
                    <button class="input-zone p-3 m-2" style="float: left;" @onclick="HandleRestartClick">Restart Application</button>
                </div>
            }


        </MudMainContent>
    </MudLayout>
</AuthorizeView>

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private IDistributedCache cache { get; set; }
    [Inject] private IHostApplicationLifetime hostApplicationLifetime { get; set; }
    private FilterItems filterItems { get; set; }
    private SearchBox searchBox;
    private Guid FilterItemsCategoryId => filterItems != null ? filterItems.CategoryId : Guid.Parse("00000000-0000-0000-0000-000000000000");
    private string SearchText { get; set; }
    private bool fromCache { get; set; }
    private DateTime? fromDate { get; set; } = DateTime.Today.AddYears(-10);
    private DateTime? toDate { get; set; } = DateTime.Today.AddDays(1);
    protected List<string> TagsSelection { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadData();
        TagsSelection = await TagsCacheService.GetTagsSelectionAsync(appState.UserId);
    }

    public async Task<List<ListItemViewModel>> LoadFromCache()
    {
        string recordKey = "items";
        var cachedItems = await cache.GetRecordAsync<List<ListItemViewModel>>(recordKey);  // read cache
        if (cachedItems is null)
        {
            fromCache = false;
            ItemsVm = MapperHelper.MapItems<ListItem, ListItemViewModel>(Items);
            await cache.SetRecordAsync(recordKey, ItemsVm);
            return ItemsVm;
        }
        fromCache = true;
        return cachedItems;
    }

    public async Task UpdateList()
    {
        StateHasChanged();
        Expression<Func<ListItem, bool>> filter = await searchBox.MakeSearchFilter();
        Items = await ListItemRepository.ExecuteQuery(filter);
        ItemsVm = MapperHelper.MapItems<ListItem, ListItemViewModel>(Items);
        StateHasChanged();
    }

    private async Task DeleteItem(ListItemViewModel itemVm)
    {
        var item = await ListItemRepository.GetById(itemVm.Id);
        ListItemRepository.Delete(item.Id);
        await ListItemRepository.Save();
        await UpdateList();
        await JSRuntime.InvokeAsync<bool>("notify", $"Deleted {itemVm.Name}");
    }


    private async Task DeleteFile(FileViewModel fileVm, ListItemViewModel itemVm)
    {
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("swalConfirm", $"Are you sure, that you want to delete File {fileVm.Name} ?");
        if (!isConfirmed)
        {
            return;
        }
        itemVm.Files.Remove(fileVm);
        await FileService.DelFile(fileVm.Id);
    }

    private async Task GetFile(FileViewModel fileVm)
    {
        var file = await FileService.GetFile(fileVm.Id);
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileVm.Name, "application/octet-stream", file.Bytes);
    }

    private async Task ClickActive(ListItemViewModel itemVm)
    {
        var item = await ListItemRepository.GetById(itemVm.Id);
        item.Active = !item.Active;
        ListItemRepository.Update(item);
        await ListItemRepository.Save();
    }

    private async Task EditItem(ListItemViewModel itemVm)
    {
        var item = await ListItemRepository.GetById(itemVm.Id);
        item = MapperHelper.MapItem<ListItemViewModel, ListItem>(itemVm, item);
        item.Modified = DateTime.Now;
        ListItemRepository.Update(item);
        await ListItemRepository.Save();
        await JSRuntime.InvokeAsync<bool>("notify", $"Updated {item.Name}");
        item.IsEditing = false;
        await UpdateList();
    }

    private void ShowEdit(ListItemViewModel itemVm)
    {
        itemVm.IsEditing = !itemVm.IsEditing;
    }

    private async Task HandleRestartClick()
    {
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("swalConfirm", "Are you sure, that you want to restart ?");
        if (!isConfirmed)
        {
            return;
        }
        await Task.Run(() => hostApplicationLifetime.StopApplication());
    }

}
